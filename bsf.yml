openapi: 3.0.0
info:
  title: The Banner Saga Factions Community Server
  description: This implements the server routes of the Banner Saga Factions game.
  contact:
    email: piercelowe1@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 0.0.1
externalDocs:
  description: View source code
  url: https://github.com/Banner-Saga-Factions/BSF-Custom-Server
servers:
  - url: https://{environment}.pieloaf.com/v1/services
    variables:
      environment:
        default: bsf.live
        enum:
          - bsf.live    # Production server
          - bsf.dev     # Development server
tags:
  - name: game
    description: Basic game operations
    externalDocs:
      description: Find out more 
      url: https://github.com/Banner-Saga-Factions/BSF-Custom-Server/blob/main/docs/serverEndpoints.md#game-endpoints
  - name: account
    description: Account operations
    externalDocs:
      description: Find out more
      url: https://github.com/Banner-Saga-Factions/BSF-Custom-Server/blob/main/docs/serverEndpoints.md#account-endpoints
  - name: battle
    description: Battle interactions
    externalDocs:
      description: Find out more
      url: https://github.com/Banner-Saga-Factions/BSF-Custom-Server/blob/main/docs/serverEndpoints.md#battle-endpoints
  - name: auth
    description: User authentication operations
    externalDocs:
      description: Find out more
      url: https://github.com/Banner-Saga-Factions/BSF-Custom-Server/blob/main/docs/serverEndpoints.md#auth-endpoints
  - name: lobby
    description: Battle lobby operations
  - name: roster
    description: Roster management operations
  - name: queue
    description: Battle queueing operations
    externalDocs:
      description: Find out more
      url: https://github.com/Banner-Saga-Factions/BSF-Custom-Server/blob/main/docs/serverEndpoints.md#queue-endpoints
  - name: iap
    description: In app purchase operations
  - name: chat
    description: Chat messaging operations
  - name: tourney
    description: Tournament operations
paths:
  /game/{session_key}:
    get:
      tags:
        - game
      summary: Session ping endpoint
      description: Game client pings this endpoint for updates throughout the session
      operationId: pull_data
      parameters:
        - $ref: '#/components/parameters/sessionKeyParam'
      responses:
        '200':
          description: >-
            OK. This can contain an array of any data structure. Each data
            structure will include a `class` field to indicate to the client the
            data type
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                nullable: true
        '401':
          $ref: '#/components/responses/Unauthorised'
  /game/location/{session_key}:
    post:
      tags:
        - game
      summary: Update client overworld location
      description: When client changes location from the overworld, notify the server of new location
      operationId: handle_location_update
      parameters:
        - $ref: '#/components/parameters/sessionKeyParam'
      requestBody:
        description: Location name
        content:
          text/plain:
            schema:
              $ref: '#/components/schemas/LocationUpdate'
      responses:
        '200':
          description: OK
        '401':
          $ref: '#/components/responses/Unauthorised'
  /game/leaderboards/{session_key}:
    post:
      tags:
        - game
      summary: Gets latest leaderboards
      operationId: handle_get_leaderboard
      parameters:
        - $ref: '#/components/parameters/sessionKeyParam'
      requestBody:
        description: Array of leaderboard ids to get for a given tournament ID
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LeaderboardRequest'
      responses:
        '200':
          description: Leaderboards for requested the board ids
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LeaderboardsData'
        '401':
          $ref: '#/components/responses/Unauthorised'
  /account/info/{session_key}:
    get:
      tags:
        - account
      summary: Get user account information
      operationId: get_account_info
      parameters:
        - $ref: '#/components/parameters/sessionKeyParam'
      responses:
        '200':
          description: User account information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountInfo'
        '401':
          $ref: '#/components/responses/Unauthorised'
  /account/tutorial/{session_key}:
    post:
      tags:
        - account
      summary: Inidicate user has completed the tutorial
      operationId: handle_tutorial_complete
      parameters:
        - $ref: '#/components/parameters/sessionKeyParam'
      responses:
        '200':
          description: OK
        '401':
          $ref: '#/components/responses/Unauthorised'
  /battle/action/{session_key}:
    post:
      tags:
        - battle
      summary: Execute an action in battle
      operationId: handle_battle_action
      parameters:
        - $ref: '#/components/parameters/sessionKeyParam'
      requestBody:
        description: >-
          Battle action descriptor including
          
          - active unit
          
          - target unit
          
          - tiles moved
          
          - action id
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BattleAction'
      responses:
        '200':
          description: OK
        '401':
          $ref: '#/components/responses/Unauthorised'
  /battle/deploy/{session_key}:
    post:
      tags:
        - battle
      summary: Deploy units to battle
      operationId: handle_battle_deploy
      parameters:
        - $ref: '#/components/parameters/sessionKeyParam'
      requestBody:
        description: Describes unit placement at start of battle
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BattleDeploy'
      responses:
        '200':
          description: OK
        '401':
          $ref: '#/components/responses/Unauthorised'
  /battle/exit/{session_key}:
    post:
      tags:
        - battle
      summary: User exit battle
      operationId: handle_battle_exit
      parameters:
        - $ref: '#/components/parameters/sessionKeyParam'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BattleExit'
      responses:
        '200':
          description: OK
        '401':
          $ref: '#/components/responses/Unauthorised'
  /battle/killed/{session_key}:
    post:
      tags:
        - battle
      summary: Notify server of unit kill
      operationId: handle_kill_unit
      parameters:
        - $ref: '#/components/parameters/sessionKeyParam'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BattleKill'
      responses:
        '200':
          description: OK
        '401':
          $ref: '#/components/responses/Unauthorised'
  /battle/move/{session_key}:
    post:
      tags:
        - battle
      summary: Notify server of unit move
      operationId: handle_move_unit
      parameters:
        - $ref: '#/components/parameters/sessionKeyParam'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BattleMove'
      responses:
        '200':
          description: OK
        '401':
          $ref: '#/components/responses/Unauthorised'
  /battle/query/{session_key}:
    post:
      tags:
        - battle
      summary: Get moves in a past turn
      description: Client queries server for moves in a given turn, expects an array of each move in a turn on the `/services/game/{session_key}` endpoint
      operationId: handle_battle_query
      parameters:
        - $ref: '#/components/parameters/sessionKeyParam'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BattleQuery'
      responses:
        '200':
          description: OK
        '401':
          $ref: '#/components/responses/Unauthorised'
  /battle/ready/{session_key}:
    post:
      tags:
        - battle
      summary: Indicates client is ready for battle `deploy` stage
      operationId: handle_battle_ready
      parameters:
        - $ref: '#/components/parameters/sessionKeyParam'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BattleReady'
      responses:
        '200':
          description: OK
        '401':
          $ref: '#/components/responses/Unauthorised'
# TODO: Investigate what happens when a team surrenders
  # /battle/surrender/{session_key}:
  #   post: 
  #     tags: 
  #       -  battle
  #     summary: Indicate client surrender in battle
  #     description: Client indicates to server that team has surrendered
  #     operationId: handle_battle_surrender
  #     parameters: 
  #       - $ref: "#/components/parameters/sessionKeyParam"
  #     requestBody: 
  #       content: 
  #         application/json:
  #           schema: 
  #             type: object
  #             properties: 
  #               # unkown
  #     responses: 
  #       '200':
  #         description: OK
  /battle/sync/{session_key}:
    post:
      tags:
        - battle
      summary: Verify client is in expected battle state
      description: >-
        Client generates a hash based on the game state. The hash is used to verify the client is in the expected state.
      operationId: handle_battle_sync
      parameters:
        - $ref: '#/components/parameters/sessionKeyParam'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BattleSync'
      responses:
        '200':
          description: OK
        '401':
          $ref: '#/components/responses/Unauthorised'
  /auth/login/{http_version}:
    post:
      tags:
        - auth
      summary: User authentication end point
      operationId: handle_user_login
      parameters:
        - name: http_version
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthInfo'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthLoginResponse'
        '401':
          $ref: '#/components/responses/Unauthorised'
  /auth/logout/{session_key}:
    post:
      tags:
        - auth
      summary: Sent to server to end client session
      operationId: handle_user_logout
      parameters:
        - $ref: '#/components/parameters/sessionKeyParam'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                steam_id:
                  type: integer
                steam_ticket:
                  type: string
      responses:
        '200':
          description: OK
        '401':
          $ref: '#/components/responses/Unauthorised'
# TODO: no idea how these work
  # /lobby/invite/{session_key}:
  # /lobby/options/{session_key}:
  # /lobby/{session_key}:
  /roster/unit/stats/purchase/{session_key}:
    post:
      tags:
        - roster
      summary: Users changes stats of a unit in their roster
      operationId: handle_roster_unit_stats_purchase
      parameters:
        - $ref: '#/components/parameters/sessionKeyParam'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RosterUnitStatsPurchase'
      responses:
        '200':
          description: Returns a response mathcing the purchased unit data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RosterUnitStatsPurchase'
        '401':
          $ref: '#/components/responses/Unauthorised'
  /roster/party/arrange/{session_key}:
    post:
      tags:
        - roster
      summary: User rearranges their roster
      operationId: handle_roster_arrange
      parameters:
        - $ref: '#/components/parameters/sessionKeyParam'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Party'
      responses:
        '200':
          description: OK
        '401':
          $ref: '#/components/responses/Unauthorised'

# TODO 
  # /roster/unit/promote/{session_key}:
  # /roster/unit/hire/{session_key}:
  # /roster/unit/rename/{session_key}:
  # /roster/unit/stats/reset/{session_key}:
  # /roster/unit/retire/{session_key}:
  # /roster/unlock/{session_key}:

  # /roster/unit/variation/{session_key}:

  /vs/cancel/{session_key}:
    post:
      tags:
        - queue
      summary: Client exits battle queue
      operationId: handle_queue_exit
      parameters:
        - $ref: '#/components/parameters/sessionKeyParam'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VsCancel'
      responses:
        '200':
          description: OK
        '401':
          $ref: '#/components/responses/Unauthorised'
  /vs/start/{session_key}:
    post:
      tags:
        - queue
      summary: Client joins battle queue
      operationId: handle_queue_join
      parameters:
        - $ref: '#/components/parameters/sessionKeyParam'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VsStart'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  class:
                    type: string
                    enum:
                      - tbs.srv.data.ServerStatusData
                  session_count:
                    type: integer
                    description: Current number of players online
        '401':
          $ref: '#/components/responses/Unauthorised'

# TODO
  # /iap/finalize/{session_key}:
  # /iap/info/{session_key}:
  # /iap/init/{session_key}:

  /chat/{room}/{session_key}:
    post:
      tags:
        - chat
      summary: Sending Chat Messages
      description: Endpoint for sending chat Messages
      operationId: handle_new_chat_message
      parameters:
        - $ref: '#/components/parameters/sessionKeyParam'
        - name: room
          in: path
          required: true
          schema:
            type: string
            example: global
      requestBody:
        content:
          text/plain:
            schema:
              type: string
              example: Hey :)
      responses:
        '200':
          description: OK
        '401':
          $ref: '#/components/responses/Unauthorised'
  /session/steam/overlay/{session_key}/{state}:
    post:
      tags:
        - iap
      summary: Steam Overlay Enabled
      description: Indicates if a user has the steam overaly enabled or not
      operationId: handle_steam_overlay_state
      parameters:
        - $ref: '#/components/parameters/sessionKeyParam'
        - name: state
          in: path
          required: true
          schema:
            type: boolean
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BattleExit'
      responses:
        '200':
          description: OK
        '401':
          $ref: '#/components/responses/Unauthorised'
components:
  schemas:
  # Enums
    EntityClass:
      type: string
      enum:
        - warhawk
        - provoker
        - skystriker
        - thrasher
        - backbiter
        - siegearcher
        - archer
        - axeman
        - shieldbanger
        - warrior
        - strongarm
        - warmaster
        - bowmaster
        - axemaster
        - shieldmaster
        - warleader
    StatType:
      type: string
      enum:
        - STRENGTH
        - ARMOR
        - WILLPOWER
        - MOVEMENT
        - EXERTION
        - ACTIVE_0
        - ACTIVE_1
        - ACTIVE_2
        - KILLS
        - BATTLES
        - RANGE
        - ARMOR_BREAK
        - STRENGTH_ATTACK
        - MIN_STRENGTH_ATTACK
        - PUNCTURE_ATTACK_BONUS
        - MALICE_ATTACK_BONUS
        - BRINGTHEPAIN_COUNTER_BONUS
        - FAKE_MISS_CHANCE
        - RANK
        - MASTER_ABILITY_SUNDERING_IMPACT
        - RESIST_STRENGTH
        - RESIST_ARMOR
        - NEVER_MISS
        - INJURY_DAYS
        - INJURY
    BoardType:
      type: string
      enum:
        - ELO
        - WINS
        - WINLOSS
        - TOTAL
        - BEST_WIN_STREAK
        - WIN_STREAK
    QueueType:
      type: string
      enum:
        - QUICK
        - RANKED
        - TOURNEY
  # Basic Types
    Party:
      type: array
      items:
        type: string
        pattern: ^[a-z]*_[a-z]*_[0-9]$
        example:
          - raider_start_0
    Stat:
      type: object
      properties:
        class:
          type: string
          enum:
            - tbs.srv.data.Stat
        stat:
          $ref: '#/components/schemas/StatType'
        value:
          type: integer
          description: Rank of given stat
    EntityDef:
      type: object
      properties:
        class:
          type: string
          enum:
            - tbs.srv.data.EntityDef
        id:
          type: string
          default: ''
        entityClass:
          $ref: '#/components/schemas/EntityClass'
        name:
          type: string
        autoLevel:
          type: number
          format: float
          default: 1
        stats:
          type: array
          items:
            $ref: '#/components/schemas/Stat'
        start_date:
          type: integer
          format: int64
        appearance_acquires:
          type: integer
          description: unlocked skins/style
        appearance_index:
          type: integer
          description: equipped skin/style
    Tile:
      type: object
      properties:
        'y':
          type: integer
          example: 11
        x:
          type: integer
          example: 8
  # Composite Types
    PurchasableUnitsData:
      type: object
      description: Array of units available to purchase with renown
      properties:
        class:
          type: string
          enum:
            - tbs.srv.data.PurchasableUnitsData
        units:
          type: array
          items:
            type: object
            properties:
              class:
                type: string
                enum:
                  - tbs.srv.data.PurchasableUnitData
              def:
                $ref: '#/components/schemas/EntityDef'
              limit:
                type: integer
                default: 0
              cost:
                type: integer
                default: 10
    BattleDeploy:
      type: object
      properties:
        battle_id:
          type: string
          example: 1861dd26486:53ceb:47bda
        tiles:
          type: array
          items:
            $ref: '#/components/schemas/Tile'
    PurchaseCountData:
      type: object
      properties:
        class:
          type: string
          enum:
            - tbs.srv.util.PurchaseCountData
        account_id:
          type: integer
        item_id:
          type: string
        purchase_count:
          type: integer
          description: amount of times item was purchased
    AuthInfo:
      type: object
      properties:
        child_number:
          type: integer
        client_config:
          type: object
          properties:
            client_language:
              type: string
              maxLength: 2
              example: en
            os:
              type: string
            os_language:
              type: string
              example: en
              maxLength: 2
            screen_dpi:
              type: integer
            screen_h:
              type: integer
            screen_w:
              type: integer
        display_name:
          type: string
          example: Epic Gamer 554
        password:
          type: string
        steam_auth_ticket:
          type: string
        steam_id:
          type: integer
        username:
          type: string
    AuthLoginResponse:
      type: object
      properties:
        build_number:
          type: string
          example: 1.10.51
        display_name:
          type: string
          example: Epic Gamer 554
        session_key:
          type: string
          pattern: ^[0-9a-z]{16}
        user_id:
          type: integer
          pattern: ^[0-9]*$
        vbb_name:
          type: string
          default: null
    AccountInfo:
      type: object
      properties:
        completed_tutorial:
          type: boolean
          description: Indicates if user has completed the tutorial
        daily_login_bonus:
          type: integer
          description: Renown bonus corressponding to daily login streak
        daily_login_streak:
          type: integer
          description: Number of consecutive days player logged in
        iap_sandbox:
          type: boolean
          description: Is in-app purchase sandbox enabled
        login_count:
          type: integer
          description: Users total login count
        party:
          type: object
          properties:
            ids:
              $ref: '#/components/schemas/Party'
        purchaseable_units:
          $ref: '#/components/schemas/PurchasableUnitsData'
        purchases:
          type: array
          description: Array of all in app purchases
          items:
            $ref: '#/components/schemas/PurchaseCountData'
        renown:
          type: integer
          description: Amount of renown in user account
        roster:
          type: object
          properties:
            defs:
              type: array
              items:
                $ref: '#/components/schemas/EntityDef'
        roster_rows:
          type: integer
          description: Number of rows in roster (determines total roster capacity)
        unlocks:
          type: array
          description: Unlocked rewards
          items:
            type: object
            properties:
              class:
                type: string
                enum:
                  - tbs.srv.util.UnlockData
              account_id:
                type: integer
              unlock_id:
                type: string
              unlock_time:
                type: integer
                format: int64
              unlock_duration:
                type: integer
                default: 0
    LeaderboardRequest:
      type: object
      properties:
        board_ids:
          type: array
          items:
            anyOf:
              - $ref: '#/components/schemas/BoardType'
        tourney_id:
          type: integer
          description: Tournament ID to get leadboards from
          
    LeaderboardData:
      type: object
      properties:
        class:
          type: string
          enum:
            - tbs.srv.data.LeaderboardData
        leaderboard_type:
          anyOf:
            - $ref: '#/components/schemas/BoardType'
        display_names:
          type: array
          maxLength: 20
          items:
            type: string
        values:
          type: array
          maxLength: 20
          items:
            type: integer
        user_value:
          type: integer
        user_rank:
          type: integer
        user_display_name:
          type: string
        tourney_id:
          type: integer
        account_ids:
          type: array
          items:
            type: integer
          description: Array of account ids in tournament
        tourney_name:
          type: string
          
    LeaderboardsData:
      type: object
      properties:
        class:
          type: string
          enum:
            - tbs.srv.data.LeaderboardsData
        boards:
          type: array
          items:
            $ref: '#/components/schemas/LeaderboardData'
        max_entries:
          type: integer
          default: 1000
    LocationUpdate:
      type: string
      pattern: ^loc_[a-z]*
      example: loc_strand
    BattleAction:
      type: object
      properties:
        battle_id:
          type: string
          example: 1861dd26486:53ceb:47bda
        action:
          type: string
          example: abl_slagandburn
        entity:
          type: string
          example: 228887+1+archer_start_1
          pattern: ^[0-9]{6}\+[0-9]\+[a-z_]*[0-9]$
        target_ids:
          type: array
          items:
            type: string
        tiles:
          type: array
          items:
            $ref: '#/components/schemas/Tile'
    BattleExit:
      type: object
      properties:
        battle_id:
          type: string
          example: 1861dd26486:53ceb:47bda
        turn:
          type: integer
          default: 0
        user_id:
          type: integer
          default: 0
        ordinal:
          type: integer
          default: 0
        entity:
          type: string
          default: null
    BattleKill:
      type: object
      properties:
        battle_id:
          type: string
          example: 1861dd26486:53ceb:47bda
        entity:
          type: string
          description: Entity id of the killed unit
        killedparty:
          type: integer
          description: User id of the killed team
        killer:
          type: string
          description: Entity id of killing unit
        killerparty:
          type: integer
          description: User id of the killing team
        ordinal:
          type: integer
        turn:
          type: integer
        user_id:
          type: integer
    BattleMove:
      type: object
      properties:
        battle_id:
          type: string
          example: 1861dd26486:53ceb:47bda
        entity:
          type: string
          description: Entity id of the killed unit
        ordinal:
          type: integer
        tiles:
          type: array
          items:
            $ref: '#/components/schemas/Tile'
        turn:
          type: integer
    BattleQuery:
      type: object
      properties:
        battle_id:
          type: string
          example: 1861dd26486:53ceb:47bda
        turn:
          type: integer
    BattleReady:
      type: object
      properties:
        battle_id:
          type: string
          example: 1861dd26486:53ceb:47bda
    BattleSync:
      type: object
      properties:
        battle_id:
          type: string
          example: 1861dd26486:53ceb:47bda
        entities:
          type: array
          items:
            type: string
          description: Always empty
        entity:
          type: string
          description: Enitity id of the unit whose turn it is
        hash:
          type: integer
          description: Hash generated based on game state at end of previous turn
        randomSampleCount:
          type: integer
          description: Unkown
        team:
          type: string
          description: User id as a string of the team whose turn it is
        turn:
          type: integer
    RosterUnitStatsPurchase:
      type: object
      properties:
        deltas:
          type: array
          items:
            type: integer
        unit_id:
          type: string
        stats:
          type: array
          items:
            $ref: '#/components/schemas/Stat'
    VsStart:
      type: object
      properties:
        match_handle:
          type: integer
          description: Number of games in current user session
        vs_type:
          $ref: '#/components/schemas/QueueType'
        tourney_id:
          type: integer
          description: 0 for quick play
        party:
          $ref: '#/components/schemas/Party'
        timer:
          type: integer
          description: Users configured round timer
    VsCancel:
      type: object
      properties:
        match_handle:
          type: integer
          description: Number of games in current user session
  parameters:
    sessionKeyParam:
      name: session_key
      in: path
      required: true
      schema:
        type: string
        pattern: ^[0-9a-z]{16}
        maxLength: 16
  responses: 
    Unauthorised:
      description: Unauthorised
      content:
        text/plain:
          schema: 
            type: string
            pattern: "^getSession no such session: [a-z0-9]{16}$"